"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=_default;var _echarts=_interopRequireDefault(require("echarts")),_tooltipStyle=_interopRequireDefault(require("../config/tooltipStyle"));function _default(e,t,i){for(var l=Object.assign({gridLeft:30,gridTop:60,gridRight:30,gridBottom:30,legendTop:10,legendName:["","",""],tooltipUnit:"",xAxisFontSize:12,xAxisMaxCharNum:2,xAxisFilter:"",yAxisUnit:"",yAxisSplitNum:5,dataZoomStyle:[0,100,!1],showPlan:!1,clickFn:null},i),r=[],a=[],o=[],n=[],s=[],u=0;u<e[0].length;u++)r.push(e[0][u].departmentName.replace(l.xAxisFilter,"")),a.push(e[0][u].actualTarget);s.push({type:"bar",name:l.legendName[0],data:a,barMaxWidth:20,itemStyle:{color:new _echarts.default.graphic.LinearGradient(0,0,0,1,[{offset:0,color:"#1595ff"},{offset:1,color:"#8c53ca"}])}});for(var p=0;p<e[1].length;p++)o.push(e[1][p].actualTarget);s.push({type:"line",name:l.legendName[1],data:o,itemStyle:{color:"#4ED552"}});for(var c=0;c<e[2].length;c++)n.push(e[2][c].actualTarget);s.push({type:"line",name:l.legendName[2],data:n,itemStyle:{color:"#ff6161"}});var d=_echarts.default.init(document.getElementById(t),"customed"),g=Object.assign({trigger:"axis",axisPointer:{type:"line",lineStyle:{color:"#ccc",width:1},label:{precision:2},z:0},formatter:function(e){for(var t=e[0].name,i=0;i<e.length;i++){t+="<br>"+('<span style="display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:'+(e[i].color.colorStops?e[i].color.colorStops[0].color:e[i].color)+';"></span>')+e[i].seriesName+"ï¼š"+e[i].value+l.tooltipUnit}return t}},_tooltipStyle.default);d.setOption({tooltip:g,grid:{left:l.gridLeft,top:l.gridTop,right:l.gridRight,bottom:l.gridBottom,containLabel:!0},legend:{top:l.legendTop,data:l.legendName},xAxis:{data:r,axisLabel:{lineHeight:l.xAxisFontSize,fontSize:l.xAxisFontSize,formatter:function(e){for(var t="",i=l.xAxisMaxCharNum,r=Math.ceil(e.length/i),a=0;a<r;a++){var o=e.slice(a*i,(a+1)*i);0<r-1&&(o+="\n"),t+=o}return t}}},yAxis:{type:"value",splitNumber:l.yAxisSplitNum,axisLabel:{formatter:function(e){return e+l.yAxisUnit}}},series:s})}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
