"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=_default;var _echarts=_interopRequireDefault(require("echarts")),_tooltipStyle=_interopRequireDefault(require("../config/tooltipStyle"));function _default(e,t,r){for(var o=Object.assign({gridLeft:0,gridTop:60,gridRight:30,gridBottom:30,scale:3,xAxisFontSize:12,clickFn:null},r),a=[],i=[],l=[],n=e[0].date.slice(0,4),c=e[0].date.slice(4),s=0;s<e.length;s++){a.push(e[s].actualTarget),i.push(s*o.scale);for(var u=[],d=0;d<e.length;d++)u[d]=0;u[s]=1*o.scale,l.push({type:"bar",name:e[s].actualTarget,data:u,barMaxWidth:24,stack:"1",itemStyle:{color:new _echarts.default.graphic.LinearGradient(0,0,1,0,[{offset:0,color:"#1595FF"},{offset:1,color:"#12EDFF"}])},label:{show:!0,fontSize:13,offset:[0,2],color:"#fff",formatter:function(e){return e.seriesIndex-1==e.dataIndex?e.name:""}}})}l.unshift({type:"bar",name:"blank",data:i,barMaxWidth:24,stack:"1",itemStyle:{opacity:0}});var f=_echarts.default.init(document.getElementById(t),"customed"),g=Object.assign({trigger:"item",formatter:function(e){if("blank"==e.seriesName)return"";var t=1*n,r=t,a=1*c+e.dataIndex*o.scale,i=a+o.scale-1;return 12<i&&(r+=1,i-=12,12<a&&(t+=1,a-=12)),e.name+"<br>"+t+a.toString().replace(/^(\d)$/,"0$1")+"~"+r+i.toString().replace(/^(\d)$/,"0$1")}},_tooltipStyle.default);f.setOption({tooltip:g,grid:{left:o.gridLeft,top:o.gridTop,right:o.gridRight,bottom:o.gridBottom,containLabel:!0},xAxis:[{type:"value",axisLabel:{color:"#666",lineHeight:o.xAxisFontSize,fontSize:o.xAxisFontSize,formatter:function(e){var t=1*n,r=1*c+e;return 12<r&&(t+=1,r-=12),r.toString().replace(/^(\d)$/,"0$1"),t+""+r.toString().replace(/^(\d)$/,"0$1")}}}],yAxis:[{show:!1,data:a}],series:l}),o.clickFn&&f.on("click",o.clickFn)}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
